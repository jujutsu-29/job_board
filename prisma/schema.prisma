// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  user
  admin
}

model User {
  id    String  @id @default(cuid())
  name  String?
  email String? @unique

  emailVerified DateTime?
  password      String?
  image         String?

  role     UserRole  @default(user)
  accounts Account[]
  sessions Session[]
  otps     Otp[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model Otp {
  id        String   @id @default(uuid())
  userId    String   @unique
  code      String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Company {
  id          String   @id @default(cuid())
  name        String
  website     String?  @unique
  description String?
  companyType String?
  tags        String[] @default([])
  logo        String?
  slug        String?  @unique
  jobs        Job[]
  benefits    String[]  @default([])
}

  enum JobStatus {
    draft
    published
    archived
    closed
  }

  model Job {
    id                  String    @id @default(cuid())
    title               String
    companyId           String
    image               String?
    company             Company   @relation(fields: [companyId], references: [id])
    description         String
    applyUrl            String    @unique    
    slug                String    @unique
    status              JobStatus @default(draft)
    isFeatured          Boolean   @default(false)
    source              String?
    postedAt            DateTime?
    expiresAt           DateTime?
    createdById         String?
    createdAt           DateTime  @default(now())
    updatedAt           DateTime  @updatedAt
    jobType             String?
    salary              String?
    experience          String?
    requirements        String[]  @default([])
    basicQualifications String[]  @default([])
    keyResponsibilities String[]  @default([])
    technicalSkills     String[]  @default([])
    locationsAvailable  String[]  @default([])
    tags                String[]  @default([])
    batches             String?
  }
